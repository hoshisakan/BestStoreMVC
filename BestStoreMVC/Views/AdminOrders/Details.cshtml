@model Order
@{
    string paymentBadgeColor = "bg-danger";

    if (Model.PaymentStatus == "pending")
    {
        paymentBadgeColor = "bg-warning text-dark";
    }
    else if (Model.PaymentStatus == "accepted")
    {
        paymentBadgeColor = "bg-success";
    }
    else if (Model.PaymentStatus == "rejected")
    {
        paymentBadgeColor = "bg-danger";
    }
    else if (Model.PaymentStatus == "refunded")
    {
        paymentBadgeColor = "bg-info text-dark";
    }

    string orderBadgeColor = "bg-danger";

    if (Model.OrderStatus == "created")
    {
        orderBadgeColor = "bg-secondary";
    }
    else if (Model.OrderStatus == "pending")
    {
        orderBadgeColor = "bg-warning text-dark";
    }
    else if (Model.OrderStatus == "processing")
    {
        orderBadgeColor = "bg-primary";
    }
    else if (Model.OrderStatus == "shipped")
    {
        orderBadgeColor = "bg-info";
    }
    else if (Model.OrderStatus == "delivered")
    {
        orderBadgeColor = "bg-success";
    }
    else if (Model.OrderStatus == "cancelled")
    {
        orderBadgeColor = "bg-dark";
    }
}

<!-- cspell:ignoreWords tabindex -->

<h3 class="text-center mb-4">
    Order Details
</h3>

@* 顯示成功訊息 *@
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <strong>Success!</strong> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@* 顯示錯誤訊息 *@
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error!</strong> @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<a class="btn btn-link" asp-controller="AdminOrders" asp-action="Index">
    Orders
</a>

<div class="row mb-4">
    <div class="col-lg-6">
        <div class="border rounded py-3 px-4 h-100">
            <h3 class="mb-4">Order</h3>

            <div class="row mb-2 pb-2 border-bottom">
                <div class="col">Order ID</div>
                <div class="col">@Model.Id</div>
            </div>

            <div class="row mb-2 pb-2 border-bottom">
                <div class="col">Delivery Address</div>
                <div class="col">@Model.DeliveryAddress</div>
            </div>

            <div class="row mb-2 pb-2 border-bottom">
                <div class="col">Payment Method</div>
                <div class="col">@Model.PaymentMethod</div>
            </div>

            <div class="row mb-2 pb-2 border-bottom">
                <div class="col">Payment Status</div>
                <div class="col">
                    <span class="badge rounded-pill @paymentBadgeColor">@Model.PaymentStatus</span>
                    <a href="#" class="mx-2" data-bs-toggle="modal" data-bs-target="#paymentStatusModal">
                        Edit
                    </a>
                    <a href="#" data-bs-toggle="modal" data-bs-target="#paymentDetailsModal">
                        Details
                    </a>
                </div>
            </div>

            <div class="row mb-2 pb-2 border-bottom">
                <div class="col">
                    Order Status
                </div>
                <div class="col">
                    <span class="badge rounded-pill @orderBadgeColor">@Model.OrderStatus</span>
                    <a class="ms-2" data-bs-toggle="modal" data-bs-target="#orderStatusModal">
                        Edit
                    </a>
                </div>
            </div>

            <div class="row mb-2 pb-2 border-bottom">
                <div class="col">Order Date</div>
                <div class="col">@Model.CreatedAt</div>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="border rounded py-3 px-4 h-100">
            <h3 class="mb-4">Client</h3>

            <div class="row mb-2 pb-2 border-bottom">
                <div class="col">Name</div>
                <div class="col">
                    <a asp-controller="Users" asp-action="Details" asp-route-id="@Model.Client!.Id">
                        @(Model.Client!.FirstName + " " + Model.Client.LastName)
                    </a>
                </div>
            </div>

            <div class="row mb-2 pb-2 border-bottom">
                <div class="col">
                    N° Orders
                </div>
                <div class="col">
                    @ViewBag.NumOrders
                </div>
            </div>

            <div class="row mb-2 pb-2 border-bottom">
                <div class="col">
                    Email
                </div>
                <div class="col">
                    @Model.Client.Email
                </div>
            </div>

            <div class="row mb-2 pb-2 border-bottom">
                <div class="col">
                    Phone
                </div>
                <div class="col">
                    @Model.Client.PhoneNumber
                </div>
            </div>

            <div class="row mb-2 pb-2 border-bottom">
                <div class="col">
                    Address
                </div>
                <div class="col">
                    @Model.Client.Address
                </div>
            </div>

            <div class="row mb-2">
                <div class="col">
                    Registered At
                </div>
                <div class="col">
                    @Model.Client.CreatedAt
                </div>
            </div>
        </div>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th style="width: 100px">
                Description
            </th>
            <th></th>
            <th style="width: 100px">
                Units
            </th>
            <th style="width: 100px">
                Amount
            </th>
        </tr>
    </thead>
    <tbody>
        @{
            decimal subtotal = 0;
            foreach (var item in Model.Items)
            {
                subtotal += item.UnitPrice * item.Quantity;

                <tr>
                    <td>
                        <img src="/products/@item.Product.ImageFileName" width="100" alt="..." />
                    </td>
                    <td>
                        <a style="text-decoration: none; color: inherit;" asp-controller="Store"
                           asp-action="Details" asp-route-id="@item.Product.Id">
                            @item.Product.Name
                        </a>
                        @item.Product.Category<br />
                        @(item.UnitPrice)$
                    </td>
                    <td>
                        @item.Quantity
                    </td>
                    <td>
                        @(item.UnitPrice* item.Quantity)$
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div class="ms-auto mb-3" style="width: 250px">
    <div class="row">
        <div class="col fw-bold">Subtotal:</div>
        <div class="col text-end">@(subtotal)$</div>
    </div>
    <div class="row">
        <div class="col fw-bold">Shipping Fee:</div>
        <div class="col text-end">@(Model.ShippingFee)$</div>
    </div>
    <div class="row">
        <div class="col fw-bold">Total</div>
        <div class="col text-end">@(subtotal + Model.ShippingFee)$</div>
    </div>
</div>

<div class="modal fade" id="paymentStatusModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Update Payment Status</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-controller="AdminOrders" asp-action="Edit">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.Id" />
                    <label>Payment Status</label>
                    <select class="form-select mb-2" name="payment_status">
                        <option value="pending" selected="@(Model.PaymentStatus == "pending")">pending</option>
                        <option value="accepted" selected="@(Model.PaymentStatus == "accepted")">accepted</option>
                        <option value="rejected" selected="@(Model.PaymentStatus == "rejected")">rejected</option>
                        <option value="refunded" selected="@(Model.PaymentStatus == "refunded")">refunded</option>
                    </select>
                    <button type="submit" class="btn btn-primary">Save</button>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="orderStatusModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Update Order Status</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-controller="AdminOrders" asp-action="Edit">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.Id" />
                    <label>Order Status</label>
                    <select class="form-select mb-2" name="order_status">
                        <option value="created" selected="@(Model.OrderStatus == "created" ? "selected" : null)">created</option>
                        <option value="pending" selected="@(Model.OrderStatus == "pending" ? "selected" : null)">pending</option>
                        <option value="processing" selected="@(Model.OrderStatus == "processing" ? "selected" : null)">processing</option>
                        <option value="shipped" selected="@(Model.OrderStatus == "shipped" ? "selected" : null)">shipped</option>
                        <option value="delivered" selected="@(Model.OrderStatus == "delivered" ? "selected" : null)">delivered</option>
                        <option value="cancelled" selected="@(Model.OrderStatus == "cancelled" ? "selected" : null)">cancelled</option>
                    </select>

                    <button type="submit" class="btn btn-primary">Save</button>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="paymentDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">PayPal API Response Details</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (string.IsNullOrEmpty(Model.PaymentDetails))
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> No payment details available for this order.
                    </div>
                }
                else
                {
                    <div class="mb-3">
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-primary btn-sm" onclick="formatJSON()">
                                <i class="bi bi-code-slash"></i> Format JSON
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="copyToClipboard()">
                                <i class="bi bi-clipboard"></i> Copy
                            </button>
                        </div>
                    </div>
                    <div class="border rounded p-3 bg-light">
                        <pre id="payment-details" style="white-space: pre-wrap; font-family: 'Courier New', monospace; font-size: 0.9em; max-height: 500px; overflow-y: auto;"></pre>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    // 取得 JSON 字串
    const paymentDetailsRaw = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.PaymentDetails ?? ""));
    let currentFormat = 'raw';

    // 格式化 JSON 函數
    function formatJSON() {
        const preElement = document.getElementById("payment-details");
        if (!preElement) return;

        if (currentFormat === 'formatted') {
            // 切換回原始格式
            preElement.textContent = paymentDetailsRaw;
            currentFormat = 'raw';
        } else {
            // 格式化 JSON
            try {
                const obj = JSON.parse(paymentDetailsRaw);
                const pretty = JSON.stringify(obj, null, 2);
                preElement.textContent = pretty;
                currentFormat = 'formatted';
            } catch (error) {
                // 如果不是有效的 JSON，保持原樣
                preElement.textContent = paymentDetailsRaw;
                currentFormat = 'raw';
            }
        }
    }

    // 複製到剪貼板函數
    async function copyToClipboard() {
        const preElement = document.getElementById("payment-details");
        if (!preElement) return;

        try {
            await navigator.clipboard.writeText(preElement.textContent);
            
            // 顯示成功訊息
            const button = event.target.closest('button');
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="bi bi-check"></i> Copied!';
            button.classList.remove('btn-outline-secondary');
            button.classList.add('btn-success');
            
            setTimeout(() => {
                button.innerHTML = originalText;
                button.classList.remove('btn-success');
                button.classList.add('btn-outline-secondary');
            }, 2000);
        } catch (error) {
            console.error('Failed to copy: ', error);
        }
    }

    // 初始化顯示
    document.addEventListener('DOMContentLoaded', function() {
        const preElement = document.getElementById("payment-details");
        if (preElement && paymentDetailsRaw) {
            let pretty = paymentDetailsRaw;
            try {
                // 嘗試格式化 JSON
                const obj = JSON.parse(paymentDetailsRaw);
                pretty = JSON.stringify(obj, null, 2);
                currentFormat = 'formatted';
            } catch {
                // 不是合法 JSON 就保持原樣
                pretty = paymentDetailsRaw;
                currentFormat = 'raw';
            }
            preElement.textContent = pretty;
        }
    });
</script>