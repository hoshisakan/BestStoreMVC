services:
    reverse_proxy:
        build:
            context: ./conf/nginx
            dockerfile: Dockerfile
            args:
                - NGINX_TIME_ZONE=${NGINX_TIME_ZONE}
                - NGINX_LANG_NAME=${NGINX_LANG_NAME}
                - NGINX_LANG_INPUTFILE=${NGINX_LANG_INPUTFILE}
                - NGINX_LANG_CHARMAP=${NGINX_LANG_CHARMAP}
                - DEBIAN_FRONTEND=${NGINX_DEBIAN_FRONTEND}
        image: ${CONTAINER_AUTHOR}/${PROJECT_NAME}/nginx:${NGINX_IMAGE_VERSION}
        container_name: ${PROJECT_NAME}_nginx
        env_file:
            - ${ENV_FILE_PATH}
        environment:
            - LANG=${NGINX_LANG_NAME}
        volumes:
            - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./conf/nginx/conf.d:/etc/nginx/conf.d
            - ./logs/nginx:/var/log/nginx
            - ./certs/nginx:/etc/nginx/ssl
        ports:
            - ${NGINX_HTTP_EXPOSE_PORT}:${NGINX_HTTP_INNER_PORT}
            - ${NGINX_HTTPS_EXPOSE_PORT}:${NGINX_HTTPS_INNER_PORT}
        depends_on:
            - web
            - mssql
        networks:
            beststoremvc_net:
                ipv4_address: ${NGINX_HOST_IP}
        user: root
        tty: true
        restart: always

    web:
        build:
            context: .
            dockerfile: Dockerfile
            args:
                - DOTNET_IMAGE_VERSION=${DOTNET_IMAGE_VERSION}
                - DOTNET_LANG_NAME=${DOTNET_LANG_NAME}
                - DOTNET_LANG_INPUTFILE=${DOTNET_LANG_INPUTFILE}
                - DOTNET_LANG_CHARMAP=${DOTNET_LANG_CHARMAP}
                - DOTNET_DEBIAN_FRONTEND=${DEBIAN_FRONTEND}
                - DOTNET_TIME_ZONE=${DOTNET_TIME_ZONE}
        image: ${CONTAINER_AUTHOR}/${PROJECT_NAME}/dotnet:${DOTNET_IMAGE_VERSION}
        container_name: ${PROJECT_NAME}_web
        env_file:
            - ${ENV_FILE_PATH}
        environment:
            - DOTNET_LANG_NAME=${DOTNET_LANG_NAME}
            - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
        # ports:
            # - ${DOTNET_HTTP_EXPOSE_PORT}:${DOTNET_HTTP_INNER_PORT}
            # - ${DOTNET_HTTPS_EXPOSE_PORT}:${DOTNET_HTTPS_INNER_PORT}
        expose:
            # - ${DOTNET_HTTP_EXPOSE_PORT}
            - ${DOTNET_HTTPS_EXPOSE_PORT}
        volumes:
            - ./certs/dotnet/BestStore.pfx:/deploy/BestStoreMVC/https/BestStore.pfx:ro
        networks:
            beststoremvc_net:
                ipv4_address: ${DOTNET_HOST_IP}
        depends_on:
            - mssql
        tty: true
        restart: always

    mssql:
        build:
            context: ./conf/mssql
            dockerfile: Dockerfile
            args:
                - MSSQL_EULA=${MSSQL_EULA}
                - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
                - MSSQL_PID=${MSSQL_PID}
        image: ${CONTAINER_AUTHOR}/${PROJECT_NAME}/mssql_${MSSQL_VERSION}
        container_name: ${PROJECT_NAME}_mssql
        volumes:
            - ./data/mssql/mssql_data:/var/opt/mssql/data
            - ./backup:${MSSQL_BACKUP_PATH}
            - ./logs/mssql:/var/opt/mssql/log
            - ./secrets/mssql:/var/opt/mssql/secrets
        environment:
            - ACCEPT_EULA=${MSSQL_EULA}
            - SA_PASSWORD=${MSSQL_SA_PASSWORD}
            - MSSQL_PID=${MSSQL_PID}
            - MSSQL_COLLATION=${MSSQL_COLLATION}
        env_file:
            - ${ENV_FILE_PATH}
        user: root
        ports:
            - ${MSSQL_OUTER_PORT}:${MSSQL_INNER_PORT}
        networks:
            beststoremvc_net:
                ipv4_address: ${MSSQL_HOST_IP}
        restart: always

networks:
    beststoremvc_net:
        driver: bridge
        ipam:
            config:
                - subnet: ${NETWORK_SUBNET}
                  gateway: ${NETWORK_GATEWAY}
